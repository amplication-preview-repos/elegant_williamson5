/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { WebScanService } from "../webScan.service";
import { WebScanCreateInput } from "./WebScanCreateInput";
import { WebScan } from "./WebScan";
import { WebScanFindManyArgs } from "./WebScanFindManyArgs";
import { WebScanWhereUniqueInput } from "./WebScanWhereUniqueInput";
import { WebScanUpdateInput } from "./WebScanUpdateInput";

export class WebScanControllerBase {
  constructor(protected readonly service: WebScanService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: WebScan })
  async createWebScan(
    @common.Body() data: WebScanCreateInput
  ): Promise<WebScan> {
    return await this.service.createWebScan({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        url1: true,
        url2: true,
        scanResult: true,
        uniqueId: true,
        url3: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [WebScan] })
  @ApiNestedQuery(WebScanFindManyArgs)
  async webScans(@common.Req() request: Request): Promise<WebScan[]> {
    const args = plainToClass(WebScanFindManyArgs, request.query);
    return this.service.webScans({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        url1: true,
        url2: true,
        scanResult: true,
        uniqueId: true,
        url3: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: WebScan })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async webScan(
    @common.Param() params: WebScanWhereUniqueInput
  ): Promise<WebScan | null> {
    const result = await this.service.webScan({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        url1: true,
        url2: true,
        scanResult: true,
        uniqueId: true,
        url3: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: WebScan })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateWebScan(
    @common.Param() params: WebScanWhereUniqueInput,
    @common.Body() data: WebScanUpdateInput
  ): Promise<WebScan | null> {
    try {
      return await this.service.updateWebScan({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          url1: true,
          url2: true,
          scanResult: true,
          uniqueId: true,
          url3: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: WebScan })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteWebScan(
    @common.Param() params: WebScanWhereUniqueInput
  ): Promise<WebScan | null> {
    try {
      return await this.service.deleteWebScan({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          url1: true,
          url2: true,
          scanResult: true,
          uniqueId: true,
          url3: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Post("/scan-web")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async ScanWebApplication(
    @common.Body()
    body: WebScanCreateInput
  ): Promise<string> {
    return this.service.ScanWebApplication(body);
  }
}
