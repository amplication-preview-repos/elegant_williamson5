/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { WebScan } from "./WebScan";
import { WebScanCountArgs } from "./WebScanCountArgs";
import { WebScanFindManyArgs } from "./WebScanFindManyArgs";
import { WebScanFindUniqueArgs } from "./WebScanFindUniqueArgs";
import { CreateWebScanArgs } from "./CreateWebScanArgs";
import { UpdateWebScanArgs } from "./UpdateWebScanArgs";
import { DeleteWebScanArgs } from "./DeleteWebScanArgs";
import { WebScanCreateInput } from "./WebScanCreateInput";
import { WebScanService } from "../webScan.service";
@graphql.Resolver(() => WebScan)
export class WebScanResolverBase {
  constructor(protected readonly service: WebScanService) {}

  async _webScansMeta(
    @graphql.Args() args: WebScanCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [WebScan])
  async webScans(
    @graphql.Args() args: WebScanFindManyArgs
  ): Promise<WebScan[]> {
    return this.service.webScans(args);
  }

  @graphql.Query(() => WebScan, { nullable: true })
  async webScan(
    @graphql.Args() args: WebScanFindUniqueArgs
  ): Promise<WebScan | null> {
    const result = await this.service.webScan(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => WebScan)
  async createWebScan(
    @graphql.Args() args: CreateWebScanArgs
  ): Promise<WebScan> {
    return await this.service.createWebScan({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => WebScan)
  async updateWebScan(
    @graphql.Args() args: UpdateWebScanArgs
  ): Promise<WebScan | null> {
    try {
      return await this.service.updateWebScan({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WebScan)
  async deleteWebScan(
    @graphql.Args() args: DeleteWebScanArgs
  ): Promise<WebScan | null> {
    try {
      return await this.service.deleteWebScan(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => String)
  async ScanWebApplication(
    @graphql.Args()
    args: WebScanCreateInput
  ): Promise<string> {
    return this.service.ScanWebApplication(args);
  }
}
