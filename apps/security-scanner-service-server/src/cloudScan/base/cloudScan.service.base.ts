/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, CloudScan as PrismaCloudScan } from "@prisma/client";
import { CloudScanCreateInput } from "./CloudScanCreateInput";

export class CloudScanServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CloudScanCountArgs, "select">
  ): Promise<number> {
    return this.prisma.cloudScan.count(args);
  }

  async cloudScans(
    args: Prisma.CloudScanFindManyArgs
  ): Promise<PrismaCloudScan[]> {
    return this.prisma.cloudScan.findMany(args);
  }
  async cloudScan(
    args: Prisma.CloudScanFindUniqueArgs
  ): Promise<PrismaCloudScan | null> {
    return this.prisma.cloudScan.findUnique(args);
  }
  async createCloudScan(
    args: Prisma.CloudScanCreateArgs
  ): Promise<PrismaCloudScan> {
    return this.prisma.cloudScan.create(args);
  }
  async updateCloudScan(
    args: Prisma.CloudScanUpdateArgs
  ): Promise<PrismaCloudScan> {
    return this.prisma.cloudScan.update(args);
  }
  async deleteCloudScan(
    args: Prisma.CloudScanDeleteArgs
  ): Promise<PrismaCloudScan> {
    return this.prisma.cloudScan.delete(args);
  }
  async ScanCloudEnvironment(args: CloudScanCreateInput): Promise<string> {
    throw new Error("Not implemented");
  }
}
