/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CloudScanService } from "../cloudScan.service";
import { CloudScanCreateInput } from "./CloudScanCreateInput";
import { CloudScan } from "./CloudScan";
import { CloudScanFindManyArgs } from "./CloudScanFindManyArgs";
import { CloudScanWhereUniqueInput } from "./CloudScanWhereUniqueInput";
import { CloudScanUpdateInput } from "./CloudScanUpdateInput";

export class CloudScanControllerBase {
  constructor(protected readonly service: CloudScanService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CloudScan })
  async createCloudScan(
    @common.Body() data: CloudScanCreateInput
  ): Promise<CloudScan> {
    return await this.service.createCloudScan({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        accessKey: true,
        secretKey: true,
        scanResult: true,
        uniqueId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CloudScan] })
  @ApiNestedQuery(CloudScanFindManyArgs)
  async cloudScans(@common.Req() request: Request): Promise<CloudScan[]> {
    const args = plainToClass(CloudScanFindManyArgs, request.query);
    return this.service.cloudScans({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        accessKey: true,
        secretKey: true,
        scanResult: true,
        uniqueId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CloudScan })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async cloudScan(
    @common.Param() params: CloudScanWhereUniqueInput
  ): Promise<CloudScan | null> {
    const result = await this.service.cloudScan({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        accessKey: true,
        secretKey: true,
        scanResult: true,
        uniqueId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CloudScan })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCloudScan(
    @common.Param() params: CloudScanWhereUniqueInput,
    @common.Body() data: CloudScanUpdateInput
  ): Promise<CloudScan | null> {
    try {
      return await this.service.updateCloudScan({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          accessKey: true,
          secretKey: true,
          scanResult: true,
          uniqueId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CloudScan })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCloudScan(
    @common.Param() params: CloudScanWhereUniqueInput
  ): Promise<CloudScan | null> {
    try {
      return await this.service.deleteCloudScan({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          accessKey: true,
          secretKey: true,
          scanResult: true,
          uniqueId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Post("/scan-cloud")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async ScanCloudEnvironment(
    @common.Body()
    body: CloudScanCreateInput
  ): Promise<string> {
    return this.service.ScanCloudEnvironment(body);
  }
}
