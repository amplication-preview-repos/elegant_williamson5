/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CloudScan } from "./CloudScan";
import { CloudScanCountArgs } from "./CloudScanCountArgs";
import { CloudScanFindManyArgs } from "./CloudScanFindManyArgs";
import { CloudScanFindUniqueArgs } from "./CloudScanFindUniqueArgs";
import { CreateCloudScanArgs } from "./CreateCloudScanArgs";
import { UpdateCloudScanArgs } from "./UpdateCloudScanArgs";
import { DeleteCloudScanArgs } from "./DeleteCloudScanArgs";
import { CloudScanCreateInput } from "./CloudScanCreateInput";
import { CloudScanService } from "../cloudScan.service";
@graphql.Resolver(() => CloudScan)
export class CloudScanResolverBase {
  constructor(protected readonly service: CloudScanService) {}

  async _cloudScansMeta(
    @graphql.Args() args: CloudScanCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CloudScan])
  async cloudScans(
    @graphql.Args() args: CloudScanFindManyArgs
  ): Promise<CloudScan[]> {
    return this.service.cloudScans(args);
  }

  @graphql.Query(() => CloudScan, { nullable: true })
  async cloudScan(
    @graphql.Args() args: CloudScanFindUniqueArgs
  ): Promise<CloudScan | null> {
    const result = await this.service.cloudScan(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CloudScan)
  async createCloudScan(
    @graphql.Args() args: CreateCloudScanArgs
  ): Promise<CloudScan> {
    return await this.service.createCloudScan({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CloudScan)
  async updateCloudScan(
    @graphql.Args() args: UpdateCloudScanArgs
  ): Promise<CloudScan | null> {
    try {
      return await this.service.updateCloudScan({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CloudScan)
  async deleteCloudScan(
    @graphql.Args() args: DeleteCloudScanArgs
  ): Promise<CloudScan | null> {
    try {
      return await this.service.deleteCloudScan(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => String)
  async ScanCloudEnvironment(
    @graphql.Args()
    args: CloudScanCreateInput
  ): Promise<string> {
    return this.service.ScanCloudEnvironment(args);
  }
}
